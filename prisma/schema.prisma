// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(EMPLOYEE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sales         Sale[]
  purchases     Purchase[]
  transactions  Transaction[]
  stockMovements StockMovement[]
  vehicleExpenses VehicleExpense[]
  assets        Asset[]
  maintenanceLogs MaintenanceLog[]
  representatives Representative[]

  Driver Driver[]
}

enum UserRole {
  ADMIN
  ACCOUNTANT
  REPRESENTATIVE
  WAREHOUSE_KEEPER
  EMPLOYEE
}

// Product model
model Product {
  id                String          @id @default(cuid()) @map("_id")
  code              String          @unique
  barcode           String?         @unique
  name              String
  description       String?
  category          Category        @relation(fields: [categoryId], references: [id])
  categoryId        String
  unit              Unit            @relation(fields: [unitId], references: [id])
  unitId            String
  price             Float
  lastPurchasePrice Float?
  quantity          Float           @default(0)
  minQuantity       Float           @default(0)
  maxQuantity       Float           @default(0)
  type              ProductType     @default(FINISHED_PRODUCT)
  status            ProductStatus   @default(IN_STOCK)
  location          String?         // Storage location in warehouse
  isActive          Boolean         @default(true)
  purchaseItems     PurchaseItem[]
  saleItems         SaleItem[]
  stockMovements    StockMovement[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  warehouseItems WarehouseItem[]
}

enum ProductType {
  RAW_MATERIAL      // المواد الخام
  FINISHED_PRODUCT  // المنتج النهائي
  PACKAGING         // مواد التغليف
  BOTTLE            // الزجاجات
  CARTON            // الكراتين
}

enum ProductStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

// Category model
model Category {
  id          String    @id @default(cuid()) @map("_id")
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Unit model
model Unit {
  id          String    @id @default(cuid()) @map("_id")
  name        String    @unique
  symbol      String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Customer model
model Customer {
  id              String    @id @default(cuid()) @map("_id")
  name            String
  phone           String?
  address         String?
  type            CustomerType
  taxNumber       String?
  commercialReg   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sales           Sale[]
}

enum CustomerType {
  WHOLESALE
  RETAIL
}

// Supplier model
model Supplier {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  phone         String?
  address       String?
  taxNumber     String?
  isActive      Boolean   @default(true)
  notes         String?
  balance       Float     @default(0)
  lastPurchaseDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  purchases     Purchase[]
}

// Vehicle model for transportation management
model Vehicle {
  id          String      @id @default(cuid()) @map("_id")
  plateNumber String      @unique
  model       String
  capacity    Float
  notes       String?
  status      VehicleStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expenses    VehicleExpense[]
  maintenances Maintenance[]
  fuelRecords  FuelRecord[]

  Driver Driver[]
}

// VehicleExpense model for vehicle expenses
model VehicleExpense {
  id          String      @id @default(cuid()) @map("_id")
  vehicleId   String
  vehicle     Vehicle     @relation(fields: [vehicleId], references: [id])
  type        ExpenseType
  amount      Float
  date        DateTime
  odometer    Float?      // قراءة العداد
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

enum ExpenseType {
  FUEL
  MAINTENANCE
  OIL_CHANGE
  TIRES
  INSURANCE
  OTHER
}

// Sales and Purchases Management
model Sale {
  id            String    @id @default(cuid()) @map("_id")
  invoiceNumber String    @unique
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  date          DateTime
  dueDate       DateTime?
  status        PaymentStatus @default(PENDING)
  items         SaleItem[]
  subtotal      Float
  tax           Float     @default(0)
  discount      Float     @default(0)
  total         Float
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  repId         String
  rep           SalesRepresentative @relation(fields: [repId], references: [id])
  representatives Representative[] @relation("RepresentativeSales", references: [id], fields: [representativeIds])
  representativeIds String[] @default([])
}

model SaleItem {
  id          String    @id @default(cuid()) @map("_id")
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Float
  price       Float
  total       Float
  notes       String?
}

model Purchase {
  id            String    @id @default(cuid()) @map("_id")
  invoiceNumber String    @unique
  supplierId    String
  supplier      Supplier  @relation(fields: [supplierId], references: [id])
  date          DateTime
  dueDate       DateTime?
  status        PaymentStatus @default(PENDING)
  items         PurchaseItem[]
  subtotal      Float
  tax           Float     @default(0)
  discount      Float     @default(0)
  total         Float
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id])
}

model PurchaseItem {
  id          String    @id @default(cuid()) @map("_id")
  purchaseId  String
  purchase    Purchase  @relation(fields: [purchaseId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Float
  price       Float
  total       Float
  notes       String?
}

enum PaymentStatus {
  PAID
  PARTIALLY_PAID
  PENDING
  OVERDUE
  CANCELLED
  COMPLETED
}

// Transaction model for financial records
model Transaction {
  id            String    @id @default(cuid()) @map("_id")
  type          TransactionType
  amount        Float
  description   String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  status        TransactionStatus @default(PENDING)
  currency      String    @default("EGP")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// StockMovement model for tracking inventory changes
model StockMovement {
  id          String        @id @default(cuid()) @map("_id")
  product     Product       @relation(fields: [productId], references: [id])
  productId   String
  type        MovementType
  quantity    Float
  reference   String?       // Reference number (e.g., purchase/sale invoice number)
  notes       String?
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum MovementType {
  PURCHASE      // شراء
  SALE          // بيع
  ADJUSTMENT    // تعديل
  RETURN        // مرتجع
  DAMAGE        // تالف
  TRANSFER      // نقل
}

// Maintenance model for vehicle and asset maintenance
model Maintenance {
  id            String    @id @default(cuid()) @map("_id")
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId     String
  description   String
  cost          Float
  date          DateTime
  nextDate      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// FuelRecord model for vehicle fuel consumption
model FuelRecord {
  id            String    @id @default(cuid()) @map("_id")
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId     String
  liters        Float
  cost          Float
  date          DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SalesRepresentative {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  phone         String    @unique
  attendance    AttendanceRecord[]
  sales         Sale[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model AttendanceRecord {
  id              String    @id @default(cuid()) @map("_id")
  repId           String
  checkIn         DateTime  @default(now())
  checkOut        DateTime?
  notes           String?
  
  representative  SalesRepresentative @relation(fields: [repId], references: [id])
}

model Asset {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  type          AssetType
  purchaseDate  DateTime
  value         Float
  nextMaintenance DateTime?
  status        AssetStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String
  user          User      @relation(fields: [createdBy], references: [id]) 
  maintenanceLogs MaintenanceLog[]
}

enum AssetType {
  MACHINE
  EQUIPMENT
  VEHICLE
  OTHER
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

model MaintenanceLog {
  id          String    @id @default(cuid()) @map("_id")
  assetId     String
  asset       Asset     @relation(fields: [assetId], references: [id])
  date        DateTime
  description String
  cost        Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  user        User      @relation(fields: [createdBy], references: [id]) 
}

model Representative {
  id        String    @id @default(cuid()) @map("_id")
  name      String
  phone     String
  area      String
  status    RepresentativeStatus
  sales     Sale[] @relation("RepresentativeSales", references: [id], fields: [saleIds])
  saleIds   String[] @default([])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String
  user      User      @relation(fields: [createdBy], references: [id])
}

enum RepresentativeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum WarehouseType {
  RAW_MATERIALS
  BOTTLES
  CARTONS
  FINISHED_PRODUCTS
}

model Warehouse {
  id          String        @id @default(cuid()) @map("_id")
  name        String
  type        WarehouseType
  location    String?
  description String?
  items       WarehouseItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WarehouseItem {
  id          String    @id @default(cuid()) @map("_id")
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Float     @default(0)
  minQuantity Float     @default(0)
  location    String?   // موقع التخزين داخل المخزن
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([warehouseId, productId])
}

enum MaterialType {
  RAW_MATERIAL    // مواد خام
  PACKAGING       // مواد تعبئة
  BOTTLE          // زجاجات
  CARTON          // كراتين
}

enum UnitType {
  KG        // كيلوجرام
  GRAM      // جرام
  LITER     // لتر
  PIECE     // قطعة
  BOX       // صندوق
}

model Material {
  id          String       @id @default(cuid()) @map("_id")
  name        String      // اسم المادة
  code        String      @unique  // كود المادة
  type        MaterialType
  unit        UnitType    // وحدة القياس
  quantity    Float       @default(0)  // الكمية المتوفرة
  minQuantity Float       @default(0)  // الحد الأدنى
  price       Float       @default(0)  // سعر الوحدة
  location    String?     // موقع التخزين
  supplier    String?     // المورد
  notes       String?     // ملاحظات
  transactions MaterialTransaction[] // سجل المعاملات
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model MaterialTransaction {
  id          String    @id @default(cuid()) @map("_id")
  materialId  String
  material    Material  @relation(fields: [materialId], references: [id])
  type        String    // IN or OUT
  quantity    Float     // الكمية
  price       Float?    // السعر وقت المعاملة
  reference   String?   // رقم الفاتورة أو أمر الشراء
  notes       String?   // ملاحظات
  createdAt   DateTime  @default(now())
  createdBy   String    // اسم المستخدم
}

model Driver {
  id            String       @id @default(cuid()) @map("_id")
  name          String      // اسم السائق
  phone         String      // رقم الهاتف
  licenseNumber String      @unique  // رقم الرخصة
  status        DriverStatus @default(ACTIVE)  // حالة السائق
  address       String?     // العنوان
  nationalId    String?     @unique  // الرقم القومي
  birthDate     DateTime?   // تاريخ الميلاد
  licenseExpiry DateTime?   // تاريخ انتهاء الرخصة
  vehicleId     String?     // المركبة المخصصة
  vehicle       Vehicle?    @relation(fields: [vehicleId], references: [id])
  deliveries    Delivery[]  // عمليات التسليم
  notes         String?     // ملاحظات
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdBy     String
  user          User        @relation(fields: [createdBy], references: [id])
}

enum DriverStatus {
  ACTIVE      // نشط
  ON_LEAVE    // في إجازة
  INACTIVE    // غير نشط
}

model Delivery {
  id          String    @id @default(cuid()) @map("_id")
  driverId    String
  driver      Driver    @relation(fields: [driverId], references: [id])
  date        DateTime
  status      DeliveryStatus
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum DeliveryStatus {
  PENDING     // قيد الانتظار
  IN_PROGRESS // جاري التسليم
  COMPLETED   // تم التسليم
  CANCELLED   // ملغي
}

